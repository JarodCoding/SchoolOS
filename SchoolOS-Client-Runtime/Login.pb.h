// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef PROTOBUF_Login_2eproto__INCLUDED
#define PROTOBUF_Login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Login_2eproto();
void protobuf_AssignDesc_Login_2eproto();
void protobuf_ShutdownFile_Login_2eproto();

class Login;
class LoginProcess;
class Programm;
class Directory;
class File;

// ===================================================================

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes UserHash = 1;
  inline bool has_userhash() const;
  inline void clear_userhash();
  static const int kUserHashFieldNumber = 1;
  inline const ::std::string& userhash() const;
  inline void set_userhash(const ::std::string& value);
  inline void set_userhash(const char* value);
  inline void set_userhash(const void* value, size_t size);
  inline ::std::string* mutable_userhash();
  inline ::std::string* release_userhash();
  inline void set_allocated_userhash(::std::string* userhash);

  // @@protoc_insertion_point(class_scope:Login)
 private:
  inline void set_has_userhash();
  inline void clear_has_userhash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* userhash_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class LoginProcess : public ::google::protobuf::Message {
 public:
  LoginProcess();
  virtual ~LoginProcess();

  LoginProcess(const LoginProcess& from);

  inline LoginProcess& operator=(const LoginProcess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginProcess& default_instance();

  void Swap(LoginProcess* other);

  // implements Message ----------------------------------------------

  LoginProcess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginProcess& from);
  void MergeFrom(const LoginProcess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Programm Programms = 1;
  inline int programms_size() const;
  inline void clear_programms();
  static const int kProgrammsFieldNumber = 1;
  inline const ::Programm& programms(int index) const;
  inline ::Programm* mutable_programms(int index);
  inline ::Programm* add_programms();
  inline const ::google::protobuf::RepeatedPtrField< ::Programm >&
      programms() const;
  inline ::google::protobuf::RepeatedPtrField< ::Programm >*
      mutable_programms();

  // required .Directory RootDirectory = 2;
  inline bool has_rootdirectory() const;
  inline void clear_rootdirectory();
  static const int kRootDirectoryFieldNumber = 2;
  inline const ::Directory& rootdirectory() const;
  inline ::Directory* mutable_rootdirectory();
  inline ::Directory* release_rootdirectory();
  inline void set_allocated_rootdirectory(::Directory* rootdirectory);

  // @@protoc_insertion_point(class_scope:LoginProcess)
 private:
  inline void set_has_rootdirectory();
  inline void clear_has_rootdirectory();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Programm > programms_;
  ::Directory* rootdirectory_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static LoginProcess* default_instance_;
};
// -------------------------------------------------------------------

class Programm : public ::google::protobuf::Message {
 public:
  Programm();
  virtual ~Programm();

  Programm(const Programm& from);

  inline Programm& operator=(const Programm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Programm& default_instance();

  void Swap(Programm* other);

  // implements Message ----------------------------------------------

  Programm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Programm& from);
  void MergeFrom(const Programm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 PID = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPIDFieldNumber = 1;
  inline ::google::protobuf::uint32 pid() const;
  inline void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Programm)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static Programm* default_instance_;
};
// -------------------------------------------------------------------

class Directory : public ::google::protobuf::Message {
 public:
  Directory();
  virtual ~Directory();

  Directory(const Directory& from);

  inline Directory& operator=(const Directory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Directory& default_instance();

  void Swap(Directory* other);

  // implements Message ----------------------------------------------

  Directory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Directory& from);
  void MergeFrom(const Directory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string Files = 2;
  inline int files_size() const;
  inline void clear_files();
  static const int kFilesFieldNumber = 2;
  inline const ::std::string& files(int index) const;
  inline ::std::string* mutable_files(int index);
  inline void set_files(int index, const ::std::string& value);
  inline void set_files(int index, const char* value);
  inline void set_files(int index, const char* value, size_t size);
  inline ::std::string* add_files();
  inline void add_files(const ::std::string& value);
  inline void add_files(const char* value);
  inline void add_files(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& files() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_files();

  // repeated .Directory SubDirectorys = 3;
  inline int subdirectorys_size() const;
  inline void clear_subdirectorys();
  static const int kSubDirectorysFieldNumber = 3;
  inline const ::Directory& subdirectorys(int index) const;
  inline ::Directory* mutable_subdirectorys(int index);
  inline ::Directory* add_subdirectorys();
  inline const ::google::protobuf::RepeatedPtrField< ::Directory >&
      subdirectorys() const;
  inline ::google::protobuf::RepeatedPtrField< ::Directory >*
      mutable_subdirectorys();

  // @@protoc_insertion_point(class_scope:Directory)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> files_;
  ::google::protobuf::RepeatedPtrField< ::Directory > subdirectorys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static Directory* default_instance_;
};
// -------------------------------------------------------------------

class File : public ::google::protobuf::Message {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const File& default_instance();

  void Swap(File* other);

  // implements Message ----------------------------------------------

  File* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 Size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:File)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static File* default_instance_;
};
// ===================================================================


// ===================================================================

// Login

// required bytes UserHash = 1;
inline bool Login::has_userhash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_userhash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_userhash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_userhash() {
  if (userhash_ != &::google::protobuf::internal::kEmptyString) {
    userhash_->clear();
  }
  clear_has_userhash();
}
inline const ::std::string& Login::userhash() const {
  return *userhash_;
}
inline void Login::set_userhash(const ::std::string& value) {
  set_has_userhash();
  if (userhash_ == &::google::protobuf::internal::kEmptyString) {
    userhash_ = new ::std::string;
  }
  userhash_->assign(value);
}
inline void Login::set_userhash(const char* value) {
  set_has_userhash();
  if (userhash_ == &::google::protobuf::internal::kEmptyString) {
    userhash_ = new ::std::string;
  }
  userhash_->assign(value);
}
inline void Login::set_userhash(const void* value, size_t size) {
  set_has_userhash();
  if (userhash_ == &::google::protobuf::internal::kEmptyString) {
    userhash_ = new ::std::string;
  }
  userhash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_userhash() {
  set_has_userhash();
  if (userhash_ == &::google::protobuf::internal::kEmptyString) {
    userhash_ = new ::std::string;
  }
  return userhash_;
}
inline ::std::string* Login::release_userhash() {
  clear_has_userhash();
  if (userhash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userhash_;
    userhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login::set_allocated_userhash(::std::string* userhash) {
  if (userhash_ != &::google::protobuf::internal::kEmptyString) {
    delete userhash_;
  }
  if (userhash) {
    set_has_userhash();
    userhash_ = userhash;
  } else {
    clear_has_userhash();
    userhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginProcess

// repeated .Programm Programms = 1;
inline int LoginProcess::programms_size() const {
  return programms_.size();
}
inline void LoginProcess::clear_programms() {
  programms_.Clear();
}
inline const ::Programm& LoginProcess::programms(int index) const {
  return programms_.Get(index);
}
inline ::Programm* LoginProcess::mutable_programms(int index) {
  return programms_.Mutable(index);
}
inline ::Programm* LoginProcess::add_programms() {
  return programms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Programm >&
LoginProcess::programms() const {
  return programms_;
}
inline ::google::protobuf::RepeatedPtrField< ::Programm >*
LoginProcess::mutable_programms() {
  return &programms_;
}

// required .Directory RootDirectory = 2;
inline bool LoginProcess::has_rootdirectory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginProcess::set_has_rootdirectory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginProcess::clear_has_rootdirectory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginProcess::clear_rootdirectory() {
  if (rootdirectory_ != NULL) rootdirectory_->::Directory::Clear();
  clear_has_rootdirectory();
}
inline const ::Directory& LoginProcess::rootdirectory() const {
  return rootdirectory_ != NULL ? *rootdirectory_ : *default_instance_->rootdirectory_;
}
inline ::Directory* LoginProcess::mutable_rootdirectory() {
  set_has_rootdirectory();
  if (rootdirectory_ == NULL) rootdirectory_ = new ::Directory;
  return rootdirectory_;
}
inline ::Directory* LoginProcess::release_rootdirectory() {
  clear_has_rootdirectory();
  ::Directory* temp = rootdirectory_;
  rootdirectory_ = NULL;
  return temp;
}
inline void LoginProcess::set_allocated_rootdirectory(::Directory* rootdirectory) {
  delete rootdirectory_;
  rootdirectory_ = rootdirectory;
  if (rootdirectory) {
    set_has_rootdirectory();
  } else {
    clear_has_rootdirectory();
  }
}

// -------------------------------------------------------------------

// Programm

// required uint32 PID = 1;
inline bool Programm::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Programm::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Programm::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Programm::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 Programm::pid() const {
  return pid_;
}
inline void Programm::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
}

// -------------------------------------------------------------------

// Directory

// required string Name = 1;
inline bool Directory::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Directory::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Directory::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Directory::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Directory::name() const {
  return *name_;
}
inline void Directory::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Directory::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Directory::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Directory::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Directory::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Directory::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string Files = 2;
inline int Directory::files_size() const {
  return files_.size();
}
inline void Directory::clear_files() {
  files_.Clear();
}
inline const ::std::string& Directory::files(int index) const {
  return files_.Get(index);
}
inline ::std::string* Directory::mutable_files(int index) {
  return files_.Mutable(index);
}
inline void Directory::set_files(int index, const ::std::string& value) {
  files_.Mutable(index)->assign(value);
}
inline void Directory::set_files(int index, const char* value) {
  files_.Mutable(index)->assign(value);
}
inline void Directory::set_files(int index, const char* value, size_t size) {
  files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Directory::add_files() {
  return files_.Add();
}
inline void Directory::add_files(const ::std::string& value) {
  files_.Add()->assign(value);
}
inline void Directory::add_files(const char* value) {
  files_.Add()->assign(value);
}
inline void Directory::add_files(const char* value, size_t size) {
  files_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Directory::files() const {
  return files_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Directory::mutable_files() {
  return &files_;
}

// repeated .Directory SubDirectorys = 3;
inline int Directory::subdirectorys_size() const {
  return subdirectorys_.size();
}
inline void Directory::clear_subdirectorys() {
  subdirectorys_.Clear();
}
inline const ::Directory& Directory::subdirectorys(int index) const {
  return subdirectorys_.Get(index);
}
inline ::Directory* Directory::mutable_subdirectorys(int index) {
  return subdirectorys_.Mutable(index);
}
inline ::Directory* Directory::add_subdirectorys() {
  return subdirectorys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Directory >&
Directory::subdirectorys() const {
  return subdirectorys_;
}
inline ::google::protobuf::RepeatedPtrField< ::Directory >*
Directory::mutable_subdirectorys() {
  return &subdirectorys_;
}

// -------------------------------------------------------------------

// File

// required string Name = 1;
inline bool File::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void File::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void File::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void File::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& File::name() const {
  return *name_;
}
inline void File::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void File::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void File::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* File::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* File::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void File::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 Size = 2;
inline bool File::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void File::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void File::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void File::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 File::size() const {
  return size_;
}
inline void File::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Login_2eproto__INCLUDED

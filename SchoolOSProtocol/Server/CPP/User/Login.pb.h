// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User/Login.proto

#ifndef PROTOBUF_User_2fLogin_2eproto__INCLUDED
#define PROTOBUF_User_2fLogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "../Data/Files.pb.h"
// @@protoc_insertion_point(includes)

namespace Server {
namespace User {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_User_2fLogin_2eproto();
void protobuf_AssignDesc_User_2fLogin_2eproto();
void protobuf_ShutdownFile_User_2fLogin_2eproto();

class Login;
class Programm;
class ProgrammSettings;

// ===================================================================

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool sucess = 1;
  inline bool has_sucess() const;
  inline void clear_sucess();
  static const int kSucessFieldNumber = 1;
  inline bool sucess() const;
  inline void set_sucess(bool value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 ClientID = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIDFieldNumber = 3;
  inline ::google::protobuf::uint32 clientid() const;
  inline void set_clientid(::google::protobuf::uint32 value);

  // required string version = 4;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 4;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:Server.User.Login)
 private:
  inline void set_has_sucess();
  inline void clear_has_sucess();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  bool sucess_;
  ::google::protobuf::uint32 clientid_;
  ::std::string* version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_User_2fLogin_2eproto();
  friend void protobuf_AssignDesc_User_2fLogin_2eproto();
  friend void protobuf_ShutdownFile_User_2fLogin_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class Programm : public ::google::protobuf::Message {
 public:
  Programm();
  virtual ~Programm();

  Programm(const Programm& from);

  inline Programm& operator=(const Programm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Programm& default_instance();

  void Swap(Programm* other);

  // implements Message ----------------------------------------------

  Programm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Programm& from);
  void MergeFrom(const Programm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .Server.User.ProgrammSettings settings = 2;
  inline bool has_settings() const;
  inline void clear_settings();
  static const int kSettingsFieldNumber = 2;
  inline const ::Server::User::ProgrammSettings& settings() const;
  inline ::Server::User::ProgrammSettings* mutable_settings();
  inline ::Server::User::ProgrammSettings* release_settings();
  inline void set_allocated_settings(::Server::User::ProgrammSettings* settings);

  // repeated .Server.Data.File files = 3;
  inline int files_size() const;
  inline void clear_files();
  static const int kFilesFieldNumber = 3;
  inline const ::Server::Data::File& files(int index) const;
  inline ::Server::Data::File* mutable_files(int index);
  inline ::Server::Data::File* add_files();
  inline const ::google::protobuf::RepeatedPtrField< ::Server::Data::File >&
      files() const;
  inline ::google::protobuf::RepeatedPtrField< ::Server::Data::File >*
      mutable_files();

  // @@protoc_insertion_point(class_scope:Server.User.Programm)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_settings();
  inline void clear_has_settings();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::Server::User::ProgrammSettings* settings_;
  ::google::protobuf::RepeatedPtrField< ::Server::Data::File > files_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_User_2fLogin_2eproto();
  friend void protobuf_AssignDesc_User_2fLogin_2eproto();
  friend void protobuf_ShutdownFile_User_2fLogin_2eproto();

  void InitAsDefaultInstance();
  static Programm* default_instance_;
};
// -------------------------------------------------------------------

class ProgrammSettings : public ::google::protobuf::Message {
 public:
  ProgrammSettings();
  virtual ~ProgrammSettings();

  ProgrammSettings(const ProgrammSettings& from);

  inline ProgrammSettings& operator=(const ProgrammSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProgrammSettings& default_instance();

  void Swap(ProgrammSettings* other);

  // implements Message ----------------------------------------------

  ProgrammSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProgrammSettings& from);
  void MergeFrom(const ProgrammSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::uint32 key() const;
  inline void set_key(::google::protobuf::uint32 value);

  // required bool allowed = 2;
  inline bool has_allowed() const;
  inline void clear_allowed();
  static const int kAllowedFieldNumber = 2;
  inline bool allowed() const;
  inline void set_allowed(bool value);

  // required uint32 ClientID = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIDFieldNumber = 3;
  inline ::google::protobuf::uint32 clientid() const;
  inline void set_clientid(::google::protobuf::uint32 value);

  // repeated string settings = 4;
  inline int settings_size() const;
  inline void clear_settings();
  static const int kSettingsFieldNumber = 4;
  inline const ::std::string& settings(int index) const;
  inline ::std::string* mutable_settings(int index);
  inline void set_settings(int index, const ::std::string& value);
  inline void set_settings(int index, const char* value);
  inline void set_settings(int index, const char* value, size_t size);
  inline ::std::string* add_settings();
  inline void add_settings(const ::std::string& value);
  inline void add_settings(const char* value);
  inline void add_settings(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& settings() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_settings();

  // @@protoc_insertion_point(class_scope:Server.User.ProgrammSettings)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_allowed();
  inline void clear_has_allowed();
  inline void set_has_clientid();
  inline void clear_has_clientid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 key_;
  bool allowed_;
  ::google::protobuf::RepeatedPtrField< ::std::string> settings_;
  ::google::protobuf::uint32 clientid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_User_2fLogin_2eproto();
  friend void protobuf_AssignDesc_User_2fLogin_2eproto();
  friend void protobuf_ShutdownFile_User_2fLogin_2eproto();

  void InitAsDefaultInstance();
  static ProgrammSettings* default_instance_;
};
// ===================================================================


// ===================================================================

// Login

// required bool sucess = 1;
inline bool Login::has_sucess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_sucess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_sucess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_sucess() {
  sucess_ = false;
  clear_has_sucess();
}
inline bool Login::sucess() const {
  return sucess_;
}
inline void Login::set_sucess(bool value) {
  set_has_sucess();
  sucess_ = value;
}

// required string name = 2;
inline bool Login::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Login::name() const {
  return *name_;
}
inline void Login::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Login::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Login::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Login::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 ClientID = 3;
inline bool Login::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login::clear_clientid() {
  clientid_ = 0u;
  clear_has_clientid();
}
inline ::google::protobuf::uint32 Login::clientid() const {
  return clientid_;
}
inline void Login::set_clientid(::google::protobuf::uint32 value) {
  set_has_clientid();
  clientid_ = value;
}

// required string version = 4;
inline bool Login::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Login::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Login::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Login::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& Login::version() const {
  return *version_;
}
inline void Login::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void Login::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void Login::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* Login::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Programm

// required string name = 1;
inline bool Programm::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Programm::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Programm::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Programm::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Programm::name() const {
  return *name_;
}
inline void Programm::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Programm::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Programm::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Programm::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Programm::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Programm::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Server.User.ProgrammSettings settings = 2;
inline bool Programm::has_settings() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Programm::set_has_settings() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Programm::clear_has_settings() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Programm::clear_settings() {
  if (settings_ != NULL) settings_->::Server::User::ProgrammSettings::Clear();
  clear_has_settings();
}
inline const ::Server::User::ProgrammSettings& Programm::settings() const {
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
inline ::Server::User::ProgrammSettings* Programm::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) settings_ = new ::Server::User::ProgrammSettings;
  return settings_;
}
inline ::Server::User::ProgrammSettings* Programm::release_settings() {
  clear_has_settings();
  ::Server::User::ProgrammSettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline void Programm::set_allocated_settings(::Server::User::ProgrammSettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
}

// repeated .Server.Data.File files = 3;
inline int Programm::files_size() const {
  return files_.size();
}
inline void Programm::clear_files() {
  files_.Clear();
}
inline const ::Server::Data::File& Programm::files(int index) const {
  return files_.Get(index);
}
inline ::Server::Data::File* Programm::mutable_files(int index) {
  return files_.Mutable(index);
}
inline ::Server::Data::File* Programm::add_files() {
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Server::Data::File >&
Programm::files() const {
  return files_;
}
inline ::google::protobuf::RepeatedPtrField< ::Server::Data::File >*
Programm::mutable_files() {
  return &files_;
}

// -------------------------------------------------------------------

// ProgrammSettings

// required uint32 key = 1;
inline bool ProgrammSettings::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProgrammSettings::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProgrammSettings::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProgrammSettings::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 ProgrammSettings::key() const {
  return key_;
}
inline void ProgrammSettings::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
}

// required bool allowed = 2;
inline bool ProgrammSettings::has_allowed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProgrammSettings::set_has_allowed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProgrammSettings::clear_has_allowed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProgrammSettings::clear_allowed() {
  allowed_ = false;
  clear_has_allowed();
}
inline bool ProgrammSettings::allowed() const {
  return allowed_;
}
inline void ProgrammSettings::set_allowed(bool value) {
  set_has_allowed();
  allowed_ = value;
}

// required uint32 ClientID = 3;
inline bool ProgrammSettings::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProgrammSettings::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProgrammSettings::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProgrammSettings::clear_clientid() {
  clientid_ = 0u;
  clear_has_clientid();
}
inline ::google::protobuf::uint32 ProgrammSettings::clientid() const {
  return clientid_;
}
inline void ProgrammSettings::set_clientid(::google::protobuf::uint32 value) {
  set_has_clientid();
  clientid_ = value;
}

// repeated string settings = 4;
inline int ProgrammSettings::settings_size() const {
  return settings_.size();
}
inline void ProgrammSettings::clear_settings() {
  settings_.Clear();
}
inline const ::std::string& ProgrammSettings::settings(int index) const {
  return settings_.Get(index);
}
inline ::std::string* ProgrammSettings::mutable_settings(int index) {
  return settings_.Mutable(index);
}
inline void ProgrammSettings::set_settings(int index, const ::std::string& value) {
  settings_.Mutable(index)->assign(value);
}
inline void ProgrammSettings::set_settings(int index, const char* value) {
  settings_.Mutable(index)->assign(value);
}
inline void ProgrammSettings::set_settings(int index, const char* value, size_t size) {
  settings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProgrammSettings::add_settings() {
  return settings_.Add();
}
inline void ProgrammSettings::add_settings(const ::std::string& value) {
  settings_.Add()->assign(value);
}
inline void ProgrammSettings::add_settings(const char* value) {
  settings_.Add()->assign(value);
}
inline void ProgrammSettings::add_settings(const char* value, size_t size) {
  settings_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProgrammSettings::settings() const {
  return settings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProgrammSettings::mutable_settings() {
  return &settings_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace User
}  // namespace Server

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_User_2fLogin_2eproto__INCLUDED
